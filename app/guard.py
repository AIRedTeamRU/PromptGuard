# app/guard.py
import re
import unicodedata
import joblib
import os
from pathlib import Path

# ==============================
# 1. –ü–£–¢–ò –ö –ú–û–î–ï–õ–Ø–ú
# ==============================

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏ (—Ä—è–¥–æ–º —Å guard.py)
BASE_DIR = Path(__file__).parent
VECTORIZER_PATH = BASE_DIR / "tfidf_vectorizer.pkl"
CLASSIFIER_PATH = BASE_DIR / "jailbreak_classifier.pkl"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
if not VECTORIZER_PATH.exists() or not CLASSIFIER_PATH.exists():
    raise FileNotFoundError(
        f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ {VECTORIZER_PATH} –∏ {CLASSIFIER_PATH} –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'app'."
    )

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
vectorizer = joblib.load(VECTORIZER_PATH)
classifier = joblib.load(CLASSIFIER_PATH)

# ==============================
# 2. –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê
# ==============================

def normalize_unicode(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"""
    return ''.join(
        c for c in unicodedata.normalize('NFD', text)
        if unicodedata.category(c) != 'So' and not unicodedata.combining(c)
    )

def leet_to_text(text: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç leet-—è–∑—ã–∫ –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    leet_map = {
        '0': '–æ', '1': '–∏', '2': '–∑', '3': '–µ', '4': '–∞', '5': '—Å',
        '6': '–±', '7': '—Ç', '8': '–≤', '9': '–¥',
        '@': '–∞', '$': '—Å', '!': '–∏', 'l': '–∏', '|': '–∏',
        'z': '–∑', 's': '—Å', 'g': '–¥', 'b': '–±'
    }
    text = text.lower()
    for leet, char in leet_map.items():
        text = text.replace(leet, char)
    return text

def clean_text(text: str) -> str:
    """–ü–æ–ª–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
    text = normalize_unicode(text)
    text = leet_to_text(text)
    text = re.sub(r'[^–∞-—è—ëa-z\s]', ' ', text, flags=re.IGNORECASE)
    return ' '.join(text.split()).lower()

# ==============================
# 3. REGEX-–§–ò–õ–¨–¢–† (—Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞)
# ==============================

JAILBREAK_PATTERNS = [
    r'\b(ignore\s+(all\s+)?(previous\s+)?instructions?)\b',
    r'\b(developer\s+mode|—Ä–µ–∂–∏–º\s+—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)\b',
    r'\b(DAN|Do\s+Anything\s+Now)\b',
    r'\b(–Ω–∞—Ä—É—à–∏\s+–ø—Ä–∞–≤–∏–ª–∞|–æ–±–æ–π–¥–∏\s+—Ñ–∏–ª—å—Ç—Ä|–∏–≥–Ω–æ—Ä–∏—Ä—É–π\s+–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)\b',
]

def regex_check(prompt: str) -> bool:
    cleaned = prompt.lower()
    for pattern in JAILBREAK_PATTERNS:
        if re.search(pattern, cleaned, re.IGNORECASE):
            return True
    return False

# ==============================
# 4. –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ==============================

def detect_jailbreak(prompt: str) -> dict:
    # üî• –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ regex (–¥–ª—è —è–≤–Ω—ã—Ö –∞—Ç–∞–∫)
    if regex_check(prompt):
        return {
            "flagged": True,
            "reason": "jailbreak_regex",
            "risk_score": 0.95,
            "suggested_rewrite": "–Ø –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —á—Ç–æ-—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ."
        }

    # üìä TF-IDF + –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    try:
        cleaned = clean_text(prompt)
        X = vectorizer.transform([cleaned])
        prob = classifier.predict_proba(X)[0][1]  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å jailbreak
        is_jailbreak = prob > 0.7

        if is_jailbreak:
            return {
                "flagged": True,
                "reason": "jailbreak_tfidf",
                "risk_score": round(float(prob), 2),
                "suggested_rewrite": "–ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
            }
    except Exception as e:
        # –ù–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –≤ –º–æ–¥–µ–ª–∏ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
        print(f"–û—à–∏–±–∫–∞ –≤ ML-–º–æ–¥–µ–ª–∏: {e}")
        pass

    # ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ
    return {
        "flagged": False,
        "reason": "safe",
        "risk_score": 0.0,
        "suggested_rewrite": prompt
    }
